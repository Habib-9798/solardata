<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Power Generation Data Management</title>

  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"/>

  <!-- jsPDF + AutoTable -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>

  <!-- Inter font -->
  <link rel="preconnect" href="https://fonts.googleapis.com"/>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet"/>

  <style>
    body { font-family: 'Inter', sans-serif; }
    ::-webkit-scrollbar { width: 8px; height: 8px; }
    ::-webkit-scrollbar-track { background: #f1f5f9; }
    .dark ::-webkit-scrollbar-track { background: #1e293b; }
    ::-webkit-scrollbar-thumb { background: #94a3b8; border-radius: 10px; }
    ::-webkit-scrollbar-thumb:hover { background: #64748b; }
    .fade-in { animation: fadeIn 0.5s ease-in-out; }
    @keyframes fadeIn { from{opacity:0; transform:translateY(10px);} to{opacity:1; transform:translateY(0);} }
    .btn-icon { display:inline-flex; align-items:center; justify-content:center; gap:.5rem; }
    input[type="date"]::-webkit-calendar-picker-indicator { opacity:.5; }
    .dark input[type="date"]::-webkit-calendar-picker-indicator { filter: invert(1); opacity:.7; }
    .toggle-checkbox:checked { right: 0; border-color:#4ade80; }
    .toggle-checkbox:checked + .toggle-label { background-color:#4ade80; }
  </style>
  <script> tailwind.config = { darkMode: 'class' } </script>
</head>

<body class="bg-slate-100 dark:bg-slate-900 text-slate-800 dark:text-slate-200 transition-colors duration-300">
<div class="container mx-auto p-3 sm:p-4 md:p-6 lg:p-8">

  <!-- Header -->
  <header class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
    <div>
      <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-slate-900 dark:text-white">Power Generation Data</h1>
      <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">All data is saved locally in your browser.</p>
    </div>
    <button id="theme-toggle" class="mt-4 sm:mt-0 p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-slate-200 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-slate-900">
      <svg id="theme-icon-dark" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
      <svg id="theme-icon-light" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
    </button>
  </header>

  <!-- Data Input Form -->
  <div id="form-section" class="bg-white dark:bg-slate-800 p-6 rounded-xl shadow-lg mb-8 fade-in">
    <h2 id="form-title" class="text-xl font-bold mb-4 border-l-4 border-blue-500 pl-4">Data Input Form</h2>
    <form id="data-form" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      <div>
        <label for="entry-date" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Date</label>
        <input type="date" id="entry-date" required class="w-full px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
      </div>
      <div>
        <label for="area-name" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Area Name</label>
        <input type="text" id="area-name" required class="w-full px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
      </div>
      <div>
        <label for="inverter" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Inverter</label>
        <input type="text" id="inverter" required class="w-full px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
      </div>
      <div>
        <label for="pv-power" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">PV Power (kW)</label>
        <input type="number" step="any" id="pv-power" required class="w-full px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
      </div>
      <div>
        <label for="generated-power" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Generated Power (kW)</label>
        <input type="number" step="any" id="generated-power" required class="w-full px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
      </div>
      <div>
        <label for="units-produced" class="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">Units Produced</label>
        <input type="number" step="any" id="units-produced" required class="w-full px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500"/>
      </div>
      <div class="col-span-full flex flex-col sm:flex-row items-start sm:items-center gap-4 mt-4">
        <button type="submit" id="form-submit-btn" class="w-full sm:w-auto bg-blue-600 text-white font-bold py-2.5 px-6 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-800 transition-all shadow-md hover:shadow-lg btn-icon">
          <i class="fas fa-plus-circle"></i> Add New Row
        </button>
        <button type="button" id="cancel-edit-btn" class="w-full sm:w-auto hidden bg-gray-500 text-white font-bold py-2.5 px-6 rounded-lg hover:bg-gray-600 focus:outline-none focus:ring-4 focus:ring-gray-300 dark:focus:ring-gray-800 transition-all shadow-md hover:shadow-lg btn-icon">
          <i class="fas fa-times-circle"></i> Cancel Edit
        </button>
        <div class="flex items-center sm:ml-auto">
          <label for="verified-toggle" class="text-sm font-medium text-slate-600 dark:text-slate-300 mr-3">Verified:</label>
          <div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
            <input type="checkbox" id="verified-toggle" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
            <label for="verified-toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
          </div>
        </div>
      </div>
    </form>
  </div>

  <!-- Actions -->
  <div class="bg-white dark:bg-slate-800 p-6 rounded-xl shadow-lg mb-8 fade-in">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <div>
        <h2 class="text-xl font-bold mb-4 border-l-4 border-sky-500 pl-4">Actions</h2>
        <div class="flex flex-wrap gap-3">
          <button id="toggle-preview-btn" class="flex-grow sm:flex-grow-0 btn-icon bg-green-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 dark:focus:ring-green-800">
            <i class="fas fa-eye"></i><span>Show Preview</span>
          </button>
          <button id="toggle-charts-btn" class="flex-grow sm:flex-grow-0 btn-icon bg-purple-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-purple-300 dark:focus:ring-purple-800">
            <i class="fas fa-chart-pie"></i><span>Hide Charts</span>
          </button>
          <button id="download-csv-btn" class="flex-grow sm:flex-grow-0 btn-icon bg-sky-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-sky-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-sky-300 dark:focus:ring-sky-800">
            <i class="fas fa-file-csv"></i><span>Download CSV</span>
          </button>
        </div>
      </div>
      <div>
        <h2 class="text-xl font-bold mb-4 border-l-4 border-red-500 pl-4">Download Reports</h2>
        <div class="flex flex-wrap gap-3">
          <button id="download-full-pdf-btn" class="flex-grow sm:flex-grow-0 btn-icon bg-red-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-red-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-red-300 dark:focus:ring-red-800">
            <i class="fas fa-file-pdf"></i><span>Full Report</span>
          </button>
          <button id="download-weekly-pdf-btn" class="flex-grow sm:flex-grow-0 btn-icon bg-orange-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-orange-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-orange-300 dark:focus:ring-orange-800">
            <i class="fas fa-calendar-week"></i><span>Weekly Report</span>
          </button>
          <button id="download-monthly-pdf-btn" class="flex-grow sm:flex-grow-0 btn-icon bg-teal-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-teal-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-teal-300 dark:focus:ring-teal-800">
            <i class="fas fa-calendar-alt"></i><span>Monthly Report</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Data Preview -->
  <div id="data-preview-section" class="bg-white dark:bg-slate-800 p-3 sm:p-6 rounded-xl shadow-lg mb-8 fade-in">
    <h2 class="text-xl font-bold mb-4 border-l-4 border-green-500 pl-4">Data Preview</h2>
    <input type="text" id="search-input" class="w-full mb-4 px-4 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Search by Area Name or Inverter..."/>
    <div id="preview-table-container" class="overflow-x-auto"></div>
    <div class="mt-4 text-right font-bold text-lg">
      Grand Total Units Produced: <span id="grand-total-units" class="text-green-600 dark:text-green-400">0</span>
    </div>
  </div>

  <!-- Charts -->
  <div id="data-visualizations-section" class="bg-white dark:bg-slate-800 p-6 rounded-xl shadow-lg fade-in">
    <h2 class="text-xl font-bold mb-6 border-l-4 border-purple-500 pl-4">Data Visualizations</h2>
    <div class="grid grid-cols-1 gap-8">
      <div class="p-4 rounded-lg bg-slate-50 dark:bg-slate-800/50 lg:w-2/3 mx-auto">
        <h3 class="text-lg font-semibold text-center mb-4">Units Produced by Area</h3>
        <canvas id="area-chart"></canvas>
      </div>
    </div>
  </div>

</div>

<script>
  // ===== STATE =====
  let powerData = [];
  let areaChartInstance = null;
  let editingDocId = null;

  // Map of { [areaName]: { remark: string, updatedAt: ISOString } }
  let areaRemarks = {};

  // ===== DOM =====
  const themeToggleBtn = document.getElementById('theme-toggle');
  const dataForm = document.getElementById('data-form');
  const formTitle = document.getElementById('form-title');
  const formSubmitBtn = document.getElementById('form-submit-btn');
  const cancelEditBtn = document.getElementById('cancel-edit-btn');
  const searchInput = document.getElementById('search-input');
  const previewContainer = document.getElementById('preview-table-container');
  const grandTotalEl = document.getElementById('grand-total-units');
  const toggleChartsBtn = document.getElementById('toggle-charts-btn');
  const togglePreviewBtn = document.getElementById('toggle-preview-btn');
  const visualizationsSection = document.getElementById('data-visualizations-section');
  const previewSection = document.getElementById('data-preview-section');
  const downloadCsvBtn = document.getElementById('download-csv-btn');
  const downloadFullPdfBtn = document.getElementById('download-full-pdf-btn');
  const downloadWeeklyPdfBtn = document.getElementById('download-weekly-pdf-btn');
  const downloadMonthlyPdfBtn = document.getElementById('download-monthly-pdf-btn');

  // ===== STORAGE HELPERS =====
  const loadDataFromLocalStorage = () => {
    const dataJSON = localStorage.getItem('powerGenerationData');
    try { return dataJSON ? JSON.parse(dataJSON) : []; }
    catch { return []; }
  };
  const saveDataToLocalStorage = (data) => {
    localStorage.setItem('powerGenerationData', JSON.stringify(data));
  };

  const loadAreaRemarks = () => {
    const r = localStorage.getItem('areaRemarks');
    try { return r ? JSON.parse(r) : {}; } catch { return {}; }
  };
  const saveAreaRemarks = () => {
    localStorage.setItem('areaRemarks', JSON.stringify(areaRemarks));
  };

  // ===== THEME =====
  const applyTheme = (isDark) => {
    document.documentElement.classList.toggle('dark', isDark);
  };
  function setThemeIcons() {
    const isDark = document.documentElement.classList.contains('dark');
    document.getElementById('theme-icon-dark')?.classList.toggle('hidden', !isDark);
    document.getElementById('theme-icon-light')?.classList.toggle('hidden', isDark);
  }
  themeToggleBtn.addEventListener('click', () => {
    const isDark = !document.documentElement.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    applyTheme(isDark);
    setThemeIcons();
    renderCharts(powerData);
  });

  // ===== FORM =====
  dataForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const entry = {
      id: editingDocId || Date.now().toString(),
      entryDate: new Date(document.getElementById('entry-date').value).toISOString(),
      areaName: document.getElementById('area-name').value.trim(),
      inverter: document.getElementById('inverter').value.trim(),
      pvPower: parseFloat(document.getElementById('pv-power').value) || 0,
      generatedPower: parseFloat(document.getElementById('generated-power').value) || 0,
      unitsProduced: parseFloat(document.getElementById('units-produced').value) || 0,
      verified: document.getElementById('verified-toggle').checked,
    };
    if (!entry.areaName || !entry.inverter || !entry.entryDate) {
      alert('Please fill out Date, Area Name, and Inverter.');
      return;
    }
    if (editingDocId) {
      const idx = powerData.findIndex(i => i.id === editingDocId);
      if (idx > -1) powerData[idx] = entry;
    } else {
      powerData.unshift(entry);
    }
    powerData.sort((a,b) => new Date(b.entryDate) - new Date(a.entryDate));
    saveDataToLocalStorage(powerData);
    renderPreview(powerData);
    renderCharts(powerData);
    resetFormState();
    document.getElementById('data-preview-section').scrollIntoView({ behavior:'smooth' });
  });

  cancelEditBtn.addEventListener('click', resetFormState);
  function resetFormState() {
    editingDocId = null;
    dataForm.reset();
    document.getElementById('entry-date').valueAsDate = new Date();
    formTitle.textContent = 'Data Input Form';
    formSubmitBtn.innerHTML = '<i class="fas fa-plus-circle"></i> Add New Row';
    formSubmitBtn.classList.replace('bg-orange-500', 'bg-blue-600');
    formSubmitBtn.classList.replace('hover:bg-orange-600', 'hover:bg-blue-700');
    cancelEditBtn.classList.add('hidden');
  }

  // ===== SEARCH =====
  const debounce = (fn, ms=200) => { let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),ms); }; };
  searchInput.addEventListener('input', debounce(e => {
    const q = e.target.value.toLowerCase();
    const filtered = powerData.filter(i =>
      i.areaName.toLowerCase().includes(q) || i.inverter.toLowerCase().includes(q)
    );
    renderPreview(filtered);
  }, 200));

  // ===== TABLE ACTIONS (edit/delete/toggle verify/save remark) =====
  previewContainer.addEventListener('click', (e) => {
    const btn = e.target.closest('button');
    if (!btn) return;

    // Save remark button (data-area attribute present)
    if (btn.classList.contains('save-remark-btn')) {
      const area = btn.dataset.area;
      const ta = document.querySelector(`textarea[data-area="${CSS.escape(area)}"]`);
      const value = (ta?.value || '').trim();
      areaRemarks[area] = { remark: value, updatedAt: new Date().toISOString() };
      saveAreaRemarks();

      // brief UI feedback
      btn.disabled = true;
      const original = btn.innerHTML;
      btn.innerHTML = '<i class="fas fa-check"></i> Saved';
      setTimeout(() => { btn.disabled = false; btn.innerHTML = original; }, 900);
      return;
    }

    const docId = btn.dataset.id;
    if (!docId) return;

    if (btn.classList.contains('edit-btn')) {
      const item = powerData.find(i => i.id === docId);
      if (item) {
        document.getElementById('entry-date').value = new Date(item.entryDate).toISOString().split('T')[0];
        document.getElementById('area-name').value = item.areaName;
        document.getElementById('inverter').value = item.inverter;
        document.getElementById('pv-power').value = item.pvPower;
        document.getElementById('generated-power').value = item.generatedPower;
        document.getElementById('units-produced').value = item.unitsProduced;
        document.getElementById('verified-toggle').checked = item.verified;

        editingDocId = docId;
        formTitle.textContent = 'Edit Data Entry';
        formSubmitBtn.innerHTML = '<i class="fas fa-save"></i> Update Row';
        formSubmitBtn.classList.replace('bg-blue-600', 'bg-orange-500');
        formSubmitBtn.classList.replace('hover:bg-blue-700', 'hover:bg-orange-600');
        cancelEditBtn.classList.remove('hidden');
        document.getElementById('form-section').scrollIntoView({ behavior:'smooth' });
      }
    } else if (btn.classList.contains('delete-btn')) {
      if (!confirm('Delete this row?')) return;
      powerData = powerData.filter(i => i.id !== docId);
      saveDataToLocalStorage(powerData);
      renderPreview(powerData);
      renderCharts(powerData);
    } else if (btn.classList.contains('verification-badge')) {
      const item = powerData.find(i => i.id === docId);
      if (item) {
        item.verified = !item.verified;
        saveDataToLocalStorage(powerData);
        renderPreview(powerData);
      }
    }
  });

  // ===== RENDER PREVIEW WITH REMARK ROW =====
  function renderPreview(data) {
    previewContainer.innerHTML = '';
    let grandTotal = 0;
    if (!data.length) {
      previewContainer.innerHTML = `<p class="text-center text-slate-500 dark:text-slate-400 py-8">No data to display. Add some using the form above.</p>`;
      grandTotalEl.textContent = '0';
      return;
    }
    const grouped = data.reduce((acc, item) => {
      (acc[item.areaName] = acc[item.areaName] || []).push(item);
      return acc;
    }, {});

    Object.keys(grouped).sort().forEach(area => {
      const items = grouped[area];
      let areaTotal = 0;
      items.forEach(i => areaTotal += i.unitsProduced);

      const tableWrapper = document.createElement('div');
      tableWrapper.className = 'mb-8';
      const currentRemark = (areaRemarks[area]?.remark) || '';

      tableWrapper.innerHTML = `
        <h3 class="text-lg font-semibold bg-slate-200 dark:bg-slate-700 p-3 rounded-t-lg">
          Area: <span class="font-bold text-blue-600 dark:text-blue-400">${area}</span>
        </h3>
        <div class="overflow-x-auto">
          <table class="min-w-full text-sm text-left text-slate-500 dark:text-slate-400">
            <thead class="text-xs text-slate-700 uppercase bg-slate-100 dark:bg-slate-700 dark:text-slate-300">
              <tr>
                <th class="px-3 py-3 sm:px-6">Date</th>
                <th class="px-3 py-3 sm:px-6">Area</th>
                <th class="px-3 py-3 sm:px-6">Inverter</th>
                <th class="px-3 py-3 sm:px-6 text-right">PV Power</th>
                <th class="px-3 py-3 sm:px-6 text-right">Gen. Power</th>
                <th class="px-3 py-3 sm:px-6 text-right">Units</th>
                <th class="px-3 py-3 sm:px-6 text-center">Status</th>
                <th class="px-3 py-3 sm:px-6 text-center">Actions</th>
              </tr>
            </thead>
            <tbody></tbody>
            <tfoot class="bg-slate-100 dark:bg-slate-800">
              <tr>
                <th colspan="5" class="px-3 py-3 sm:px-6 text-right text-base font-bold text-slate-800 dark:text-slate-200">Total Units for ${area}:</th>
                <th class="px-3 py-3 sm:px-6 text-right text-base font-bold text-blue-600 dark:text-blue-400">${areaTotal.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})}</th>
                <td colspan="2" class="px-3 py-3 sm:px-6"></td>
              </tr>
              <tr>
                <td colspan="8" class="px-3 py-3 sm:px-6">
                  <div class="flex flex-col md:flex-row gap-3 md:items-center">
                    <label class="shrink-0 font-semibold text-slate-700 dark:text-slate-300">
                      Add Remark for <span class="text-slate-900 dark:text-white">${area}</span> — <span class="text-slate-900 dark:text-white">${areaTotal.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})}</span> units. Note the reason and next step.
                    </label>
                    <textarea data-area="${area}" rows="2" class="flex-1 px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm" placeholder="e.g., Maintenance on 14th reduced output. Recheck inverter tomorrow.">${currentRemark}</textarea>
                    <button type="button" class="save-remark-btn btn-icon shrink-0 bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-800" data-area="${area}">
                      <i class="fas fa-save"></i> Save Remark
                    </button>
                  </div>
                </td>
              </tr>
            </tfoot>
          </table>
        </div>
      `;

      const tbody = tableWrapper.querySelector('tbody');
      items.forEach(item => {
        const row = document.createElement('tr');
        row.className = 'bg-white border-b dark:bg-slate-800 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-600/50';
        const badge = `<button data-id="${item.id}" class="verification-badge cursor-pointer inline-block px-2 py-1 text-xs font-medium rounded-full ${item.verified ? 'text-green-700 bg-green-100 dark:bg-green-900 dark:text-green-300' : 'text-slate-700 bg-slate-100 dark:bg-slate-700 dark:text-slate-300'}">${item.verified ? 'Verified' : 'Not Verified'}</button>`;
        row.innerHTML = `
          <td class="px-3 py-4 sm:px-6 whitespace-nowrap">${new Date(item.entryDate).toLocaleDateString('en-GB')}</td>
          <td class="px-3 py-4 sm:px-6 font-medium text-slate-900 dark:text-white">${item.areaName}</td>
          <td class="px-3 py-4 sm:px-6">${item.inverter}</td>
          <td class="px-3 py-4 sm:px-6 text-right">${item.pvPower.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})}</td>
          <td class="px-3 py-4 sm:px-6 text-right">${item.generatedPower.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})}</td>
          <td class="px-3 py-4 sm:px-6 text-right font-semibold">${item.unitsProduced.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})}</td>
          <td class="px-3 py-4 sm:px-6 text-center">${badge}</td>
          <td class="px-3 py-4 sm:px-6 text-center whitespace-nowrap">
            <button data-id="${item.id}" class="edit-btn text-blue-500 hover:text-blue-700 dark:hover:text-blue-400 p-2"><i class="fas fa-pencil-alt"></i></button>
            <button data-id="${item.id}" class="delete-btn text-red-500 hover:text-red-700 dark:hover:text-red-400 p-2"><i class="fas fa-trash-alt"></i></button>
          </td>
        `;
        tbody.appendChild(row);
      });

      previewContainer.appendChild(tableWrapper);
      grandTotal += areaTotal;
    });

    grandTotalEl.textContent = grandTotal.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2});
  }

  // ===== CHARTS =====
  function renderCharts(data) {
    const isDarkMode = document.documentElement.classList.contains('dark');
    const gridColor = isDarkMode ? 'rgba(255,255,255,.1)' : 'rgba(0,0,0,.05)';
    const textColor = isDarkMode ? '#e2e8f0' : '#334155';
    Chart.defaults.color = textColor;
    Chart.defaults.font.size = 12;

    if (areaChartInstance) areaChartInstance.destroy();

    const unitsByArea = data.reduce((acc, item) => {
      acc[item.areaName] = (acc[item.areaName] || 0) + item.unitsProduced;
      return acc;
    }, {});

    areaChartInstance = new Chart(document.getElementById('area-chart'), {
      type: 'bar',
      data: {
        labels: Object.keys(unitsByArea),
        datasets: [{
          label: 'Units Produced',
          data: Object.values(unitsByArea),
          backgroundColor: 'rgba(59,130,246,.7)',
          borderColor: 'rgba(59,130,246,1)',
          borderWidth: 1,
          borderRadius: 4
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true, grid: { color: gridColor } },
          x: { grid: { color: gridColor }, ticks: { font: { size: 12 } } }
        },
        plugins: { legend: { display: false } }
      }
    });
  }

  // ===== CSV =====
  downloadCsvBtn.addEventListener('click', () => {
    if (!powerData.length) return;
    const headers = ['Date','Area Name','Inverter','PV Power (kW)','Generated Power (kW)','Units Produced','Status','Area Remark'];
    const esc = s => {
      const v = String(s ?? '');
      return /[",\n]/.test(v) ? `"${v.replace(/"/g,'""')}"` : v;
    };
    const rows = powerData.map(row => {
      const remark = areaRemarks[row.areaName]?.remark || '';
      return [
        new Date(row.entryDate).toLocaleDateString('en-GB'),
        row.areaName, row.inverter, row.pvPower, row.generatedPower, row.unitsProduced,
        row.verified ? 'Verified' : 'Not Verified', remark
      ].map(esc).join(',');
    });
    const csv = [headers.join(','), ...rows].join('\n');
    const blob = new Blob([csv], { type:'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download','power_generation_data.csv');
    link.click(); link.remove();
  });

  // ===== PDF (includes area remark) =====
  function generatePdfReport(reportData, reportTitle) {
    if (!reportData.length) return alert(`No data available for the ${reportTitle}.`);
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('p','mm','a4');

    const totalUnits = reportData.reduce((s,i)=>s+i.unitsProduced,0);
    const verifiedCount = reportData.filter(i=>i.verified).length;
    const notVerifiedCount = reportData.length - verifiedCount;

    pdf.setFont('helvetica','bold'); pdf.setFontSize(20);
    pdf.text(reportTitle, 105, 20, { align:'center' });
    pdf.setFontSize(10); pdf.setFont('helvetica','normal');
    pdf.text(`Generated on: ${new Date().toLocaleDateString('en-GB')}`, 105, 27, { align:'center' });

    pdf.setFontSize(12); pdf.setFont('helvetica','bold'); pdf.text('Summary', 14, 40);
    pdf.autoTable({
      startY:45,
      body:[
        ['Total Entries', reportData.length],
        ['Verified Entries', verifiedCount],
        ['Not Verified Entries', notVerifiedCount],
        ['Grand Total Units', totalUnits.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2})],
      ],
      theme:'plain',
      styles:{ fontSize:10 },
      columnStyles:{ 0:{ fontStyle:'bold' } }
    });

    let finalY = pdf.autoTable.previous.finalY;

    const head = [['Date','Area','Inverter','PV Power','Gen. Power','Units','Status']];
    const body = [];
    const grouped = reportData.reduce((acc,i)=>{ (acc[i.areaName]=acc[i.areaName]||[]).push(i); return acc; }, {});
    Object.keys(grouped).sort().forEach(area=>{
      const list = grouped[area];
      let areaTotal = 0;
      list.forEach(i=>{
        areaTotal += i.unitsProduced;
        body.push([
          new Date(i.entryDate).toLocaleDateString('en-GB'),
          i.areaName,
          i.inverter,
          i.pvPower.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2}),
          i.generatedPower.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2}),
          i.unitsProduced.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2}),
          i.verified ? 'Verified' : 'Not Verified'
        ]);
      });

      // Total row
      body.push([
        { content:`Total Units for ${area}:`, colSpan:5, styles:{ halign:'right', fontStyle:'bold' } },
        { content: areaTotal.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2}), styles:{ halign:'right', fontStyle:'bold' } },
        { content:'' }
      ]);

      // Remark row (if any)
      const remark = areaRemarks[area]?.remark || '';
      if (remark) {
        body.push([
          { content:`Remark for ${area}: ${remark}`, colSpan:7, styles:{ fontStyle:'normal' } }
        ]);
      }
    });

    pdf.autoTable({
      head, body,
      startY: finalY + 10,
      theme: 'striped',
      headStyles: { fillColor:[41,128,185], textColor:255, fontStyle:'bold' },
      styles: { cellPadding:2.5, fontSize:8 },
      didParseCell(data){
        // Style area total rows and remark rows
        const raw = data.row.raw?.[0];
        if (raw && typeof raw === 'object' && raw.colSpan) {
          // total or remark rows
          data.cell.styles.fillColor = [230,230,230];
          data.cell.styles.textColor = [0,0,0];
        }
      },
      columnStyles: { 3:{halign:'right'}, 4:{halign:'right'}, 5:{halign:'right'}, 6:{halign:'center'} }
    });

    finalY = pdf.autoTable.previous.finalY;

    if (areaChartInstance) {
      const chartWidth = 180;
      const ratio = areaChartInstance.width / areaChartInstance.height;
      const chartHeight = chartWidth / ratio;
      const needed = 15 + chartHeight;
      if (finalY + needed > pdf.internal.pageSize.getHeight() - 20) {
        pdf.addPage(); finalY = 20;
      } else { finalY += 10; }
      pdf.setFontSize(14); pdf.setFont('helvetica','bold'); pdf.text('Data Visualizations', 14, finalY);
      finalY += 5;
      const img = areaChartInstance.toBase64Image();
      const x = (pdf.internal.pageSize.getWidth() - chartWidth) / 2;
      pdf.addImage(img, 'PNG', x, finalY, chartWidth, chartHeight);
    }

    pdf.save(`${reportTitle.toLowerCase().replace(/\s/g,'_')}.pdf`);
  }

  downloadFullPdfBtn.addEventListener('click', () => generatePdfReport(powerData, 'Full Power Generation Report'));

  downloadWeeklyPdfBtn.addEventListener('click', () => {
    const today = new Date();
    const dow = (today.getDay() + 6) % 7; // Monday=0
    const start = new Date(today); start.setDate(today.getDate() - dow); start.setHours(0,0,0,0);
    const end = new Date(start); end.setDate(start.getDate()+6); end.setHours(23,59,59,999);
    const weekly = powerData.filter(i => {
      const d = new Date(i.entryDate);
      return d >= start && d <= end;
    });
    generatePdfReport(weekly, 'Weekly Report');
  });

  downloadMonthlyPdfBtn.addEventListener('click', () => {
    const t = new Date();
    const start = new Date(t.getFullYear(), t.getMonth(), 1);
    const end = new Date(t.getFullYear(), t.getMonth()+1, 0);
    end.setHours(23,59,59,999);
    const monthly = powerData.filter(i => {
      const d = new Date(i.entryDate);
      return d >= start && d <= end;
    });
    generatePdfReport(monthly, 'Monthly Report');
  });

  // ===== TOGGLES =====
  toggleChartsBtn.addEventListener('click', (e) => {
    const isHidden = visualizationsSection.style.display === 'none';
    visualizationsSection.style.display = isHidden ? 'block' : 'none';
    e.currentTarget.querySelector('span').textContent = isHidden ? 'Hide Charts' : 'Show Charts';
    e.currentTarget.querySelector('i').className = isHidden ? 'fas fa-chart-pie' : 'fas fa-eye-slash';
  });
  togglePreviewBtn.addEventListener('click', (e) => {
    const isHidden = previewSection.style.display === 'none';
    previewSection.style.display = isHidden ? 'block' : 'none';
    e.currentTarget.querySelector('span').textContent = isHidden ? 'Hide Preview' : 'Show Preview';
    e.currentTarget.querySelector('i').className = isHidden ? 'fas fa-eye' : 'fas fa-eye-slash';
  });

  // ===== INIT =====
  document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = localStorage.getItem('theme');
    applyTheme(savedTheme === 'dark'); setThemeIcons();

    document.getElementById('entry-date').valueAsDate = new Date();
    powerData = loadDataFromLocalStorage();
    areaRemarks = loadAreaRemarks();

    renderPreview(powerData);
    renderCharts(powerData);
  });
</script>
</body>
</html>
